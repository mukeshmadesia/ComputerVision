# -*- coding: utf-8 -*-
"""Read_Number_Plate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZ8PImwv3QRNxQAPVXVWL1tYAfBbzzU3
"""

import easyocr

!pip install easyocr

import easyocr

!pip install opencv-python

import easyocr

import cv2

pip list

pip uninstall opencv-python-headless==4.5.5.62

pip install opencv-python-headless==4.1.2.30

import cv2

import easyocr

from easyocr import Reader

## There are different type issues - this was due to different version of opencv-python and headless
## opencv is prerequisite for easyocr

!pip install imutils

car = cv2.imread('/content/sample_data/NBR_plate.jpg')

car

car_gray = cv2.cvtColor(car,cv2.COLOR_BGR2GRAY)

car_gray

car.shape,car_gray.shape

import matplotlib.pyplot as plt

plt.imshow(car_gray)

# matplotlib expects image into RGB format .. while cvt reads the image into BGR.
# we will convert the image into RGB for

plt.imshow(cv2.cvtColor(car_gray, cv2.COLOR_BGR2RGB))

bfilter = cv2.bilateralFilter(car_gray, 11, 17, 17) #Noise reduction
edged = cv2.Canny(bfilter, 30, 200) #Edge detection
plt.imshow(cv2.cvtColor(edged, cv2.COLOR_BGR2RGB))

import imutils
keypoints = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(keypoints)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]

location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    if len(approx) == 4:
        location = approx
        break

location

import numpy as np
mask = np.zeros(car_gray.shape, np.uint8)
new_image = cv2.drawContours(mask, [location], 0,255, -1)
new_image = cv2.bitwise_and(car, car, mask=mask)

plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB))

(x,y) = np.where(mask==255)
(x1, y1) = (np.min(x), np.min(y))
(x2, y2) = (np.max(x), np.max(y))
cropped_image = car_gray[x1:x2+1, y1:y2+1]

plt.imshow(cv2.cvtColor(cropped_image, cv2.COLOR_BGR2RGB))

reader = easyocr.Reader(['en'])
result = reader.readtext(cropped_image)
result

text = result[0][-2]
# font = cv2.FONT_HERSHEY_SIMPLEX
# res = cv2.putText(car, text=text, org=(approx[0][0][0], approx[1][0][1]+60), fontFace=font, fontScale=1, color=(0,255,0), thickness=2, lineType=cv2.LINE_AA)
# res = cv2.rectangle(car, tuple(approx[0][0]), tuple(approx[2][0]), (0,255,0),3)
# plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))

text

# text = result[0][-2]
# font = cv2.FONT_HERSHEY_SIMPLEX
# res = cv2.putText(car, text=text, org=(approx[0][0][0], approx[0][0][0]+60), fontFace=font, fontScale=0.5, color=(0,255,0), thickness=2, lineType=cv2.LINE_AA)
# res = cv2.rectangle(car, tuple(approx[0][0]), tuple(approx[2][0]), (0,255,0),3)
# plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))

